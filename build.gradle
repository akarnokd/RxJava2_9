buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1'
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.4"
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "me.champeau.gradle.jmh"
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: "com.github.hierynomus.license"

String targetStr = System.getenv("RXJAVA_TARGET")
if (targetStr == null || targetStr.isEmpty()) {
    targetStr = '1.9'
    System.out.println("RXJAVA_TARGET env not found, using default " + targetStr)
}
sourceCompatibility = targetStr
targetCompatibility = targetStr

group = "com.github.akarnokd" 
ext.githubProjectName = 'rxjava2_9'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.sonatype.org/content/groups/public' }
    maven { url 'https://oss.jfrog.org/libs-snapshot' }
    maven { url 'http://repo.spring.io/libs-snapshot' }
}

apply from: file('gradle/maven.gradle')
apply plugin: 'maven'
apply plugin: 'osgi'

dependencies {
    signature 'org.codehaus.mojo.signature:java16:1.1@signature'

    compile 'org.reactivestreams:reactive-streams:1.0.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.1.0'

    testCompile 'org.reactivestreams:reactive-streams-tck:1.0.2'
    testCompile group: 'org.testng', name: 'testng', version: '6.11'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

//uploadMavenCentral {
//    repositories {
//        mavenDeployer {
//            pom.whenConfigured {
//                p -> p.dependencies = p.dependencies.findAll { 
//                    dep -> dep.artifactId != "rxjava" 
//                }
//            }
//        }
//    }
//}

jar {
    manifest {
        name = 'rxjava2_9'
        instruction 'Bundle-Vendor', 'akarnokd'
        instruction 'Bundle-Description', 'RxJava 2 built with JDK 9'
        instruction 'Bundle-DocURL', 'https://github.com/akarnokd/RxJava2_9'
        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*'
        instruction 'Eclipse-ExtensibleAPI', 'true'
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact (sourcesJar) { 
                classifier = 'sources'
            }
        }
    }
}

jmh {
    jmhVersion = '1.16'
    humanOutputFile = null
    if (project.hasProperty('jmh')) {
        include = ".*" + project.jmh + ".*"
    } else {
        include = ".*"
    }
}

plugins.withType(EclipsePlugin) {
    project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
}

javadoc {
    failOnError = false

    exclude "**/internal/**"
    exclude "**/test/**"
    exclude "**/perf/**"
    options {
        windowTitle = "RxJava Javadoc ${project.version}"
    }
    // Clear the following options to make the docs consistent with the old format
    options.addStringOption('top').value = ''
    options.addStringOption('doctitle').value = ''
    options.addStringOption('header').value = ''
    options.links("http://docs.oracle.com/javase/7/docs/api/")
	/*
    if (JavaVersion.current().isJava7()) {
        // "./gradle/stylesheet.css" only supports Java 7
        options.addStringOption('stylesheetfile', rootProject.file('./gradle/stylesheet.css').toString())
    }
	*/
}

test {
    maxHeapSize = "1g"
    testLogging  {
        events "skipped" //"started", "failed" // , "passed"
    //    showStandardStreams = true
    }
}

task testng(type: Test) {
    useTestNG()
    testLogging  {
        events=['skipped', 'failed']
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
    }
}

check.dependsOn testng

license {
    header rootProject.file('HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders true
    ignoreFailures true
    excludes(["**/*.md", "**/*.txt"])
}

jacoco {
    toolVersion = '0.7.9' // See http://www.eclemma.org/jacoco/.
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

build.dependsOn jacocoTestReport

check.dependsOn jacocoTestReport

pmd {
    toolVersion = '5.4.2'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    ruleSets = []
    ruleSetFiles = files('pmd.xml')
}

pmdMain {
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

task pmdPrint(dependsOn: 'pmdMain') << {
    File file = rootProject.file('build/reports/pmd/main.xml')
    if (file.exists()) {

        println("Listing first 100 PMD violations")

        file.eachLine { line, count ->
            if (count <= 100) {
               println(line)
            }
        }

    } else {
        println("PMD file not found.")
    }
}

build.dependsOn pmdPrint
check.dependsOn pmdPrint


animalsniffer {
    annotation = 'io.reactivex.internal.util.SuppressAnimalSniffer'
}
